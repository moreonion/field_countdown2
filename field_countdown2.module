<?php

/**
 * @file
 * Countdown timer field module allows you to create countdown timer
 * field to count the days, hours, minutes, and seconds until a specified
 * event.
 */

/**
 * Implements hook_field_formatter_info().
 */
function field_countdown2_field_formatter_info() {
  return array(
    'field_countdown2_default' => array(
      'label' => t('jQuery Countdown Timer without text timer'),
      'field types' => array('date', 'datetime', 'datestamp'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'settings' => array(
        'font_size' => '48',
        'font_size_note' => '22'),
    ),
    'field_countdown2_with_text_timer' => array(
      'label' => t('jQuery Countdown Timer with text timer'),
      'field types' => array('date', 'datetime', 'datestamp'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'settings' => array(
        'font_size' => '48',
        'font_size_note' => '22'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function field_countdown2_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if($display['type'] === 'field_countdown2_default' ||
     $display['type'] === 'field_countdown2_with_text_timer') {

    $element['font_size'] = array(
      '#title' => t('Font size of countdown'),
      '#type' => 'textfield',
      '#default_value' => $settings['font_size'],
      '#element_validate' =>
        array('element_validate_integer_positive'),
      '#required' => TRUE
    );

    $element['font_size_note'] = array(
      '#title' => t('Font size of text'),
      '#type' => 'textfield',
      '#default_value' => $settings['font_size_note'],
      '#element_validate' =>
        array('element_validate_integer_positive'),
      '#required' => TRUE
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function field_countdown2_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if($display['type'] === 'field_countdown2_default' ||
     $display['type'] === 'field_countdown2_with_text_timer') {

    $summary = t('Font size of countdown is @size px. Font size of text is @note px.',
     array('@size' => $settings['font_size'], '@note' => $settings['font_size_note']));
  }

  return $summary;
}

/**
 * Converts the given datestring to a timestamp.
 * $datetype corresponds with the date types provided by the Date module.
 */
function field_countdown2_to_timestamp($datestring, $timezone, $datetype) {
  if ($datetype === 'datetime') {
    $date = DateTime::createFromFormat('Y-m-d H:i:s', $datestring, new DateTimeZone($timezone));
  } else if($datetype === 'date') {
	$date = DateTime::createFromFormat('Y-m-d\TH:i:s', $datestring, new DateTimeZone($timezone));
  } else if($datetype === 'datestamp') {
	$date = new DateTime('@'.$datestring, new DateTimeZone('UTC'));
  }

  return $date->getTimestamp();
}

/**
 * Implements hook_field_formatter_view().
 */
function field_countdown2_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $countdown_field_id = drupal_html_id("countdown-timer-countdown");
  $font_size = $display['settings']['font_size'];
  $font_size_note = $display['settings']['font_size_note'];

  switch ($display['type']) {
    case 'field_countdown2_default':
      foreach ($items as $delta => $item) {
        $endstamp = field_countdown2_to_timestamp($item['value'], $item['timezone_db'], $item['date_type']);

        $element[$delta]['#markup'] = _field_countdown2_display_timer(
          check_plain($endstamp), $font_size, $font_size_note, $countdown_field_id, FALSE
        );
      }
      break;

    case 'field_countdown2_with_text_timer':
      foreach ($items as $delta => $item) {
        $endstamp = field_countdown2_to_timestamp($item['value'], $item['timezone_db'], $item['date_type']);

        $element[$delta]['#markup'] = _field_countdown2_display_timer(
            check_plain($endstamp), $font_size, $font_size_note, $countdown_field_id, TRUE
        );
      }
      break;
  }

  return $element;
}

/**
 * Creates the jquery countdown timer.
 */
function _field_countdown2_display_timer($time, $font_size, $font_size_note, $countdown_field_id, $text_timer = FALSE) {
  $path = libraries_get_path('jquery-countdown');
  drupal_add_js($path . '/assets/countdown/jquery.countdown.js', array(
    'type' => 'file', 'scope' => 'footer',
      )
  );
  $suffix = str_replace(array('.', ' '), array('-', '-'), microtime());
  $settings = array(
    $countdown_field_id => array(
      'countdown-settings-time' => $time,
    ),
  );
  drupal_add_js(array('field_countdown2' => $settings), 'setting');
  drupal_add_js(drupal_get_path('module', 'field_countdown2') . '/field_countdown2.js', array(
    'scope' => 'footer', 'weight' => 5,
  ));

  drupal_add_css($path . '/assets/countdown/jquery.countdown.css');
  drupal_add_css(
    '.countdownHolder {font-size: ' . $font_size . 'px}', 'inline'
  );
  drupal_add_css(
    '.countdown-timer-note { font-size: ' . $font_size_note . 'px }', 'inline'
  );

  $content = theme(
    'field_countdown2_timer',
    array(
      'id' => $countdown_field_id,
      'text_timer' => $text_timer,
    )
  );

  return $content;
}

/**
 * Implements hook_theme().
 */
function field_countdown2_theme() {
  return array(
    'field_countdown2_timer' => array(
      'variables' => array(),
    ),
  );
}

/**
 * Returns HTML for the timer container.
 */
function theme_field_countdown2_timer($variables) {
  $note_id = drupal_html_id("countdown-timer-note");

  $output = "<div class='countdown-timer'>";
  $output .= "<div id='" . $variables['id'] . "' class='countdown-timer-countdown'></div>";
  if ($variables['text_timer']) {
    $output .= "<div id='" . $note_id . "' class='countdown-timer-note'></div>";
  }
  $output .= "</div>";

  return $output;
}
